//
// Copyright (c) ZeroC, Inc. All rights reserved.
//

project.apply(plugin: com.zeroc.gradle.icebuilder.slice.SlicePlugin)

slice {
    if(project.cppPlatform) {
        cppPlatform = project.cppPlatform
    }

    if(project.cppConfiguration) {
        cppConfiguration = project.cppConfiguration
    }

    if(project.iceHome) {
        iceHome = project.iceHome
    }

    if(project.hasProperty('android')) {
        output = project.file("${project.buildDir}/generated/source/ice")
    }
}

//
// slice.iceVersion returns the version of slice2java used by Ice Builder.
// This is usually (but not always) the version of the Ice Jar files we want to use.
//
project.ext.iceArtifactVersion = slice.iceVersion

project.version = project.iceArtifactVersion

buildscript {
    //
    // If iceBuilderHome is set add its lib directory it to the local maven repositories
    // so we can build using a local plugin version
    //
    if(iceBuilderHome) {
        def builder  = new File([iceBuilderHome, "build", "libs"].join(File.separator))

        if(builder.exists()) {
            repositories {
                flatDir dirs: "file://${builder.getCanonicalPath()}"
            }
        }
    }

    if(new File("/usr/share/maven-repo").exists()){
        repositories {
            maven {
                url "file:///usr/share/maven-repo"
            }
        }
    }

    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath group: "${iceBuilderClassPath}", name: 'slice', version: "${iceBuilderVersion}"
    }
}

repositories {
    if(slice.jarDir != null) {
        flatDir {
            name "local"
            dirs slice.jarDir
        }
    }

    if(project.devRepo) {
        maven {
            url project.devRepo
        }
    }

    mavenCentral()
}

// Android does not have a compileJava task
if(!(project.hasProperty('android') && project.android.sourceSets)) {
    compileJava {
        options.debug = debug
    }
}

def demoJar(name, mainClass = name.capitalize()) {
    def taskName = name + "Jar"
    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: taskName, type: Jar) {
        version = ""
        baseName = name
        from(sourceSets.main.output) {
            include "**"
        }
    }

    jarTask.manifest {
        if(mainClass) {
            attributes("Main-Class": mainClass)
        }
        attributes("Class-Path": configurations.runtimeClasspath.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}

ext {
    demoJar = this.&demoJar
}

def demoIceBoxServer() {
    configurations {
        iceboxserver
    }

    dependencies {
        iceboxserver "com.zeroc:ice:${project.iceArtifactVersion}"
        iceboxserver "com.zeroc:icessl:${project.iceArtifactVersion}"
        iceboxserver "com.zeroc:icebox:${project.iceArtifactVersion}"
        iceboxserver "org.apache.commons:commons-compress:1.14"
    }

    // Create a jar for the client & server which includes everything in the demo.
    def jarTask = tasks.create(name: "IceBoxServerJar", type: Jar) {
        version = ""
        baseName = "iceboxserver"
    }

    jarTask.manifest {
        attributes("Main-Class": "com.zeroc.IceBox.Server")
        attributes("Class-Path": configurations.iceboxserver.resolve().collect { it.toURI() }.join(' '))
    }

    artifacts {
        archives jarTask
    }
}

ext {
    demoIceBoxServer = this.&demoIceBoxServer
}
