//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `ChatSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.demos.Chat;

/**
 * The ChatRoomCallback interface is the interface that clients implement
 * as their callback object.
 *
 * The server calls operations of this interface to communicate
 * with connected clients.
 **/
public interface ChatRoomCallback extends com.zeroc.Ice.Object
{
    /**
     * The server invokes this operation when the client sets the callback
     * for a session. This provides the client with the initial list of users
     * currently in the chat room.
     * @param users The names of users currently in the chat room.
     * @param current The Current object for the invocation.
     **/
    void init(String[] users, com.zeroc.Ice.Current current);

    /**
     * The server invokes this operation to deliver a message
     * that was sent to the chat room.
     * @param timestamp The time at which the message was sent.
     * @param name The name of the user that send the message.
     * @param message The contents of the message.
     * @param current The Current object for the invocation.
     **/
    void send(long timestamp, String name, String message, com.zeroc.Ice.Current current);

    /**
     * The server invokes this operation when a user joins
     * the chat room.
     * @param timestamp The time at which the user joined the chat room.
     * @param name The name of the user that joined the chat room.
     * @param current The Current object for the invocation.
     **/
    void join(long timestamp, String name, com.zeroc.Ice.Current current);

    /**
     * The servers invokes this operation when a user leaves
     * the chat room.
     * @param timestamp The time at which the user left the chat room.
     * @param name The name of the user that left the chat room.
     * @param current The Current object for the invocation.
     **/
    void leave(long timestamp, String name, com.zeroc.Ice.Current current);

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Chat::ChatRoomCallback",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Chat::ChatRoomCallback";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_init(ChatRoomCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String[] iceP_users;
        iceP_users = istr.readStringSeq();
        inS.endReadParams();
        obj.init(iceP_users, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_send(ChatRoomCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long iceP_timestamp;
        String iceP_name;
        String iceP_message;
        iceP_timestamp = istr.readLong();
        iceP_name = istr.readString();
        iceP_message = istr.readString();
        inS.endReadParams();
        obj.send(iceP_timestamp, iceP_name, iceP_message, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_join(ChatRoomCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long iceP_timestamp;
        String iceP_name;
        iceP_timestamp = istr.readLong();
        iceP_name = istr.readString();
        inS.endReadParams();
        obj.join(iceP_timestamp, iceP_name, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_leave(ChatRoomCallback obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        long iceP_timestamp;
        String iceP_name;
        iceP_timestamp = istr.readLong();
        iceP_name = istr.readString();
        inS.endReadParams();
        obj.leave(iceP_timestamp, iceP_name, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "init",
        "join",
        "leave",
        "send"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 4:
            {
                return _iceD_init(this, in, current);
            }
            case 5:
            {
                return _iceD_join(this, in, current);
            }
            case 6:
            {
                return _iceD_leave(this, in, current);
            }
            case 7:
            {
                return _iceD_send(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
