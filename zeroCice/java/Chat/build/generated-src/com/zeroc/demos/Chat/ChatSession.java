//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.3
//
// <auto-generated>
//
// Generated from file `ChatSession.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.zeroc.demos.Chat;

/**
 * A ChatSession is a custom Glacier2::Session for clients that use
 * Glacier2 and support callbacks (C++, Java, and .NET clients).
 *
 * @see com.zeroc.Glacier2.Session
 **/
public interface ChatSession extends com.zeroc.Glacier2.Session
{
    /**
     * The setCallback operation is called by clients to set the
     * callback used to receive notification of activity in the
     * room. Clients receive notifications as soon as they call this
     * operation (before setCallback returns).
     *
     * The first callback made by the server is a call to
     * ChatRoomCallback::init, which delivers the current list of
     * users to the client.
     * @param cb The callback the server uses to deliver notifications.
     * @param current The Current object for the invocation.
     *
     * @see ChatRoomCallback
     **/
    void setCallback(ChatRoomCallbackPrx cb, com.zeroc.Ice.Current current);

    /**
     * Send a message to the chat room.
     * @param message The message to be sent.
     * @param current The Current object for the invocation.
     * @return The time at which the message is sent.
     * @throws InvalidMessageException should the message be invalid.
     **/
    long send(String message, com.zeroc.Ice.Current current)
        throws InvalidMessageException;

    /** @hidden */
    static final String[] _iceIds =
    {
        "::Chat::ChatSession",
        "::Glacier2::Session",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::Chat::ChatSession";
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_setCallback(ChatSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        ChatRoomCallbackPrx iceP_cb;
        iceP_cb = ChatRoomCallbackPrx.uncheckedCast(istr.readProxy());
        inS.endReadParams();
        obj.setCallback(iceP_cb, current);
        return inS.setResult(inS.writeEmptyParams());
    }

    /**
     * @hidden
     * @param obj -
     * @param inS -
     * @param current -
     * @return -
     * @throws com.zeroc.Ice.UserException -
    **/
    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_send(ChatSession obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        String iceP_message;
        iceP_message = istr.readString();
        inS.endReadParams();
        long ret = obj.send(iceP_message, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeLong(ret);
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    /** @hidden */
    final static String[] _iceOps =
    {
        "destroy",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "send",
        "setCallback"
    };

    /** @hidden */
    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return com.zeroc.Glacier2.Session._iceD_destroy(this, in, current);
            }
            case 1:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 2:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
            case 5:
            {
                return _iceD_send(this, in, current);
            }
            case 6:
            {
                return _iceD_setCallback(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
